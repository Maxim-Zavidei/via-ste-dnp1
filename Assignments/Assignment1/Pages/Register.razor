@page "/Register"
@using Assignment1.Models
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Assignment1.Authentication
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<div class="container">
    <div class="row">
        <div class="box">
            <h1>Register</h1>
                <input type="text" name="" placeholder="First Name" @bind-value="firstName">
                <input type="text" name="" placeholder="Last Name" @bind-value="lastName">
                <input type="text" name="" placeholder="Email" @bind-value="email">
                <input type="password" name="" placeholder="Password" @bind-value="password">
                <input type="password" name="" placeholder="Confirm Password" @bind-value="passwordConfirmation">
                <input type="submit" name="" value="Register" @onclick="kaput">
                <div style="color: red">@ErrorMessage</div>
        </div>
    </div>
</div>

@code {
    private string firstName = "";
    private string lastName= "";
    private string email;
    private string password;
    private string passwordConfirmation;
    private string ErrorMessage;

    private void kaput() {
        if (string.IsNullOrWhiteSpace(firstName) || string.IsNullOrWhiteSpace(lastName) || firstName.Length is < 2 and < 50 || lastName.Length is < 2 and < 50) {
            ErrorMessage = "The first name and the last name should be not empty, and in between 2 and 50";
            return;
        }
        if (string.IsNullOrWhiteSpace(email) || !(new EmailAddressAttribute().IsValid(email))) {
            ErrorMessage = "Invalid email";
            return;
        }
        if (string.IsNullOrWhiteSpace(password) || string.IsNullOrWhiteSpace(passwordConfirmation) || !(new Regex(@"^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$").Match(password).Success)) {
            ErrorMessage = "Invalid password";
            return;
        }
        if (!password.Equals(passwordConfirmation)) {
            ErrorMessage = "Both password should match";
            return;
        }
        if (((CustomAuthenticationStateProvider) AuthenticationStateProvider).IsEmailRegisted(email)) {
            ErrorMessage = "This email is already registered.";
            return;
        }
        ((CustomAuthenticationStateProvider) AuthenticationStateProvider).RegisterUser(new User() {
            FirstName = firstName,
            LastName = lastName,
            Email = email,
            Password = password
        });
        ((CustomAuthenticationStateProvider) AuthenticationStateProvider).ValidateLogin(email, password);
        email = "";
        password = "";
        NavigationManager.NavigateTo("/");
    }
}